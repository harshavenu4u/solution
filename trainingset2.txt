create table trip(trip_id varchar(5),trip_source char(5),trip_destination char(5),trip_start_time time,trip_end_time time,trip_cost int(8),dynamic_fare char(2));

insert into trip values("tp01","CHN","BGL","13:40","15:40",3500,"Y");
insert into trip values("tp02","BGL","MUM","18:20","19:20",6700,"Y");
insert into trip values("tp03","CHN","HYD","9:45","11:10",3000,"Y");
insert into trip values("tp04","HYD","BGL","12:20","13:25",2700,"N");
insert into trip values("tp05","MUM","NDL","23:00","1:25",4500,"Y");
insert into trip values("tp06","BGL","NDL","19:40","22:10",5000,"N");
insert into trip values("tp07","NDL","MUM","16:45","17:50",6000,"Y");
insert into trip values("tp08","MUM","BGL","20:20","23:45",5000,"N");
insert into trip values("tp09","NDL","HYD","11:25","13:45",3000,"N");
insert into trip values("tp10","HYD","CHN","20:30","22:20",4500,"Y");
insert into trip values("tp11","BGL","CHN","23:45","1:05",3900,"Y");

    


1) select trip_source,trip_destination,total_cost from
   (select trip_source,trip_destination,total_cost,dense_rank() over(order by total_cost) as cost from 
   (select t1.trip_source,t3.trip_destination,t1.trip_cost+t2.trip_cost+t3.trip_cost as total_cost from trip
   t1 inner join trip t2 on t1.trip_destination=t2.trip_source inner join trip t3 on t2.trip_destination=t3.trip_source
   where t1.trip_source="CHN" and t3.trip_destination="NDL") as a) as b  where cost=1;

   +-------------+------------------+-----------------+
   | trip_source | trip_destination | min(total_cost) |
   +-------------+------------------+-----------------+
   | CHN         | NDL              |           10700 |
   +-------------+------------------+-----------------+


2) 
select t1source,t3destination,sum from (select t1source,t3destination,addtime(time1,addtime(time2,time3)) as sum,
dense_rank()over(order by addtime(time1,addtime(time2,time3))) as rank1 from (
select  t1.trip_source as t1source,t1.trip_destination as t1destination,t2.trip_destination as t2destination,
t3.trip_destination as t3destination,
case when t1.trip_start_time<t1.trip_end_time then timediff(t1.trip_end_time,t1.trip_start_time) 
else timediff("24:00:00",timediff(t1.trip_start_time,t1.trip_end_time)) end as time1 ,
case when t2.trip_start_time<t2.trip_end_time then timediff(t2.trip_end_time,t2.trip_start_time)
 else timediff("24:00:00",timediff(t2.trip_start_time,t2.trip_end_time)) end as time2,
case when t3.trip_start_time<t3.trip_end_time then timediff(t3.trip_end_time,t3.trip_start_time)
 else timediff("24:00:00",timediff(t3.trip_start_time,t3.trip_end_time)) end as time3 
 from trip t1 inner join trip t2 on t1.trip_destination=t2.trip_source inner join trip t3 on t2.trip_destination=t3.trip_source 
where t1.trip_source="CHN" and t3.trip_destination="NDL")a)b where rank1=1;

+----------+---------------+----------+
| t1source | t3destination | sum      |
+----------+---------------+----------+
| CHN      | NDL           | 05:00:00 |
+----------+---------------+----------+
1 row in set (0.00 sec)


3)select t1.TRIP_SOURCE,t1.TRIP_DESTINATION as 1st_connect,t2.TRIP_DESTINATION as 2nd_connect,t3.TRIP_DESTINATION,
t1.TRIP_COST+t2.TRIP_COST+t3.TRIP_COST AS Total_Cost
from trip as t1 inner join trip as t2 on
t1.TRIP_DESTINATION=t2.TRIP_SOURCE and   t1.TRIP_SOURCE='CHN' and t1.DYNAMIC_FARE='Y'
 inner join trip as t3 on
t2.TRIP_DESTINATION=t3.TRIP_SOURCE
 AND t3.TRIP_DESTINATION='NDL' and t2.DYNAMIC_FARE='Y' and t3.DYNAMIC_FARE='Y';

4)
select t1source,t3destination,time from
(select  t1.trip_source as t1source,t1.trip_destination as t1destination,t2.trip_destination as t2destination,
t3.trip_destination as t3destination,timediff(t3.trip_end_time,t1.trip_start_time) as time
from trip t1 inner join trip t2 on t1.trip_destination=t2.trip_source inner join trip t3 on t2.trip_destination=t3.trip_source 
where t1.trip_source="CHN" and t3.trip_destination="NDL") as a where time>0;
+----------+---------------+----------+
| t1source | t3destination | time     |
+----------+---------------+----------+
| CHN      | NDL           | 12:25:00 |
+----------+---------------+----------+


5)  

     select t1source,t3destination,total_wait_time from
     (select t1source,t3destination,addtime(wtime1,wtime2) as total_wait_time,
     dense_rank()over(order by addtime(wtime1,wtime2) as rank1 from(

      select t1source,t3destination,total_wait_time from (select t1source,t3destination,addtime(wtime1,wtime2) as total_wait_time,
      dense_rank()over(order by addtime(wtime1,wtime2) as rank1 from (
     select  t1.trip_source as t1source,t1.trip_destination as t1destination,t2.trip_destination as t2destination,t3.trip_destination as t3destination,timediff(t2.trip_start_time,t1.trip_end_time) as wtime1,timediff(t3.trip_start_time,t2.trip_end_time) as wtime2 from trip t1 inner join trip t2 on t1.trip_destination=t2.trip_source inner join trip t3 on t2.trip_destination=t3.trip_source
     where t1.trip_source="CHN" and t3.trip_destination="NDL")a)b where rank1=1;



7)select t1.TRIP_SOURCE,t2.TRIP_SOURCE,t2.TRIP_DESTINATION  
from trip as t1 inner join trip as t2 on
t1.TRIP_DESTINATION=t2.TRIP_SOURCE and t1.TRIP_START_TIME<'11:00:00'
and t1.TRIP_SOURCE='CHN' AND t2.TRIP_DESTINATION='BGL';


9)
select TRIP_ID, TRIP_SOURCE, TRIP_DESTINATION, TRIP_START_TIME, TRIP_END_TIME, TRIP_COST, DYNAMIC_FARE,travel_time from(
select *,dense_rank() over (order by travel_time) as time_taken_order from(
select t1.*, case when t1.TRIP_START_TIME>t1.TRIP_END_TIME then timediff('24:00:00',timediff(t1.TRIP_START_TIME,t1.TRIP_END_TIME))
			when t1.TRIP_START_TIME<t1.TRIP_END_TIME then timediff(t1.TRIP_END_TIME,t1.TRIP_START_TIME) end as travel_time from
            trip as t1 ) as a) as b where time_taken_order=1;
            
10.Fetch trip details which have high travel time and no dynamic pricing
select TRIP_ID, TRIP_SOURCE, TRIP_DESTINATION, TRIP_START_TIME, TRIP_END_TIME, TRIP_COST, DYNAMIC_FARE,travel_time from(
select *,dense_rank() over (order by travel_time desc) as time_taken_order from(
select t1.*, case when t1.TRIP_START_TIME>t1.TRIP_END_TIME then timediff('24:00:00',timediff(t1.TRIP_START_TIME,t1.TRIP_END_TIME))
			when t1.TRIP_START_TIME<t1.TRIP_END_TIME then timediff(t1.TRIP_END_TIME,t1.TRIP_START_TIME) end as travel_time from
            trip as t1  where DYNAMIC_FARE='N') as a) as b where time_taken_order=1;


							dataset 3

1)select * from(select st.city,temp_farenheit,rain_inch,dense_rank() over(partition by stats_id order by temp_farenheit desc)as a from stats s  join station st on s.stats_id=st.station_id)as s where a=1;
+---------+----------------+-----------+---+
| city    | temp_farenheit | rain_inch | a |
+---------+----------------+-----------+---+
| Phoenix |          100.3 |     10.34 | 1 |
| Denever |           74.8 |      2.11 | 1 |
| Caribou |           65.8 |      4.52 | 1 |
+---------+----------------+-----------+---+
3 rows in set (0.00 sec)
2)select st.station_id,st.city,st.state,s.month,s.year,round((temp_farenheit-32)*(5/9),2) as celcius ,round((s.rain_inch*03937),2) as cm from station st join stats s on st.station_id=s.stats_id;
+------------+---------+-------+-------+------+---------+----------+
| station_id | city    | state | month | year | celcius | cm       |
+------------+---------+-------+-------+------+---------+----------+
|         13 | Phoenix | AZ    |     1 | 2010 |   14.11 |  1220.47 |
|         13 | Phoenix | AZ    |     5 | 2010 |   33.17 | 20275.55 |
|         13 | Phoenix | AZ    |    12 | 2010 |  -10.78 | 32834.58 |
|         13 | Phoenix | AZ    |     9 | 2010 |   37.94 | 40708.58 |
|         44 | Denever | CO    |     9 | 2010 |   -2.67 | 13582.65 |
|         44 | Denever | CO    |     2 | 2010 |   -2.61 |   708.66 |
|         44 | Denever | CO    |     6 | 2010 |   23.78 |  8307.07 |
|         66 | Caribou | ME    |     3 | 2010 |  -14.06 |  8267.70 |
|         66 | Caribou | ME    |     7 | 2010 |   18.78 | 17795.24 |
+------------+---------+-------+-------+------+---------+----------+
9 rows in set (0.00 sec)
3)
4)mysql> select city,state,rain_inch,avg_rain,avg_temp from
    -> (select city,state,temp_farenheit,rain_inch,avg_rain,avg_temp,dense_rank() over(partition by state order by avg_rain desc,avg_temp desc) rank_avg from
    -> (select city,state,temp_farenheit,rain_inch,avg(rain_inch) over() as avg_rain,avg(temp_farenheit) over() as avg_temp from
    -> stats s join station s1 on s.stats_id=s1.station_id) as rain_temp where avg_rain<rain_inch and avg_temp > temp_farenheit) as max_rain where rank_avg=1;
+---------+-------+-----------+-------------------+------------------+
| city    | state | rain_inch | avg_rain          | avg_temp         |
+---------+-------+-----------+-------------------+------------------+
| Phoenix | AZ    |      8.34 | 4.055555582046509 | 51.5333342022366 |
+---------+-------+-----------+-------------------+------------------+
1 row in set (0.00 sec)

5)
6)
7)
8)
9)select * from(select st.station_id,st.city,st.state,s.month,s.year,round((temp_farenheit-32)*(5/9),2) as observed_temp ,round((s.rain_inch*03937),2) as cm from station st join stats s on st.station_id=s.stats_id) as a where observed_temp<0;
+------------+---------+-------+-------+------+---------------+----------+
| station_id | city    | state | month | year | observed_temp | cm       |
+------------+---------+-------+-------+------+---------------+----------+
|         13 | Phoenix | AZ    |    12 | 2010 |        -10.78 | 32834.58 |
|         44 | Denever | CO    |     9 | 2010 |         -2.67 | 13582.65 |
|         44 | Denever | CO    |     2 | 2010 |         -2.61 |   708.66 |
|         66 | Caribou | ME    |     3 | 2010 |        -14.06 |  8267.70 |
+------------+---------+-------+-------+------+---------------+----------+
4 rows in set (0.00 sec)
10)mysql> select stats_id,month,year,temp_farenheit,rain_inch from stats having rain_inch>(select avg(rain_inch) from stats);
+----------+-------+------+----------------+-----------+
| stats_id | month | year | temp_farenheit | rain_inch |
+----------+-------+------+----------------+-----------+
|       13 |     5 | 2010 |           91.7 |      5.15 |
|       13 |    12 | 2010 |           12.6 |      8.34 |
|       13 |     9 | 2010 |          100.3 |     10.34 |
|       66 |     7 | 2010 |           65.8 |      4.52 |
+----------+-------+------+----------------+-----------+
4 rows in set (0.00 sec)


